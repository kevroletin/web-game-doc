нОграничения
==========
Пользователь может находиться только в одной игре.

Протокол
=======

###createGame
#####Format:
    {
      "action": "createGame",
      "sid": <sid>,
      "gameName": "<gameName>",
      "mapId": <mapId>,
      "playersNum": <playersNum>,
      "gameDescr": "<gameDescription>" //optional
    }
#####Success:
      {"result": "ok", "gameId": <gameId>}
      
#####Fail:
      {"result": "badJson"},
      {"result": "badSid"},
      {"result": "badMap"},
      {"result": "badNumberOfPlayers"},
      {"result": "badGameName"},
      {"result": "badGameDescription"}
      
#####Description:
Создание новой игры.

**gameName** - строка из 1-50 символов. Иначе возарвщается `{"result": "badGameName"}`. 

**mapId** - id карты, имеющейся на сервере. Иначе возарвщается `{"result": "badMap"}`

**playersNum** - целое число, которые  **меньше либо равно** playerNum
  выбранной карты, иначе возвращается `{"result": "badnumberOfPPlayers"}`)

**gameDescription** необязательное поле. Строка не длинее 300
  символов. Иначе `{"result": "badGameDescription"}`


######getGameList
На текущий момент в убежавшей вперёд Лениной реализации:
   {
      "action": "getGameList"
   }
На что получаем что то вроде:
    {
        "result": "ok",
        "games": 
        [
            {
                "activePlayer": 1,
                "gameId": 1,
                "gameName": "game1",
                "players":
                [
                    {
                        "userId": 1,
                        "username": "user1",
                        "state": 1,
                        "sid": 1,
                        "priority": 1
                    },
                    {
                        "userId": 4,
                        "username": "user4",
                        "state": 1,
                        "sid": 4,
                        "priority": 2
                    }
                ],
                "map":
                {
                    "mapId": 1,
                    "mapName": "defaultMap1",
                    "playersNum": 2,
                    "turnsNum": 5
                },
                "playersNum": 2,
                "state": 2,
                "turn": 0
            },
            {
                "activePlayer": null,
                "gameId": 2,
                "gameName": "game2",
                "players":
                [
                    {
                        "userId": 3,
                        "username": "user3",
                        "state": 0,
                        "sid": 3,
                        "priority": 1
                    }
                ],
                "map":
                {
                    "mapId": 2,
                    "mapName": "defaultMap2",
                    "playersNum": 3,
                    "turnsNum": 5
                },
                "playersNum": 1,
                "state": 1,
                "turn": null
            }
        ]
    
    }
Т.е. исчерпывающую информацию по каждой игре. Возможно есть смысл в
целях производительности сократить кол-во выводимой
информации. Например до минимума:
    {
        "result": "ok",
        "games": 
        [
            {
                "gameId": 1,
                "gameName": "game1",
            },
            {
                "gameId": 2,
                "gameName": "game2",
            }
        ]
    
    }
И добавить команду `getGameInfo` для получения подробной информации по
отдельной игре. Так же добавить `getUserInfo` `getMapInfo`

###joinGame
#####Format:
    {
        "action": "joinGame",
        "sid": "<sid>",
        "gameId": "<gameId>"
    }
#####Success:
    { "result": "ok" }

#####Fail:
Помимо стандартных:
    {"result": "badGameId"},
    { "result": "alreadyInGame" }
    { "result": "badGameState" }
    { "result": "tooManyPlayers" }
#####Description:
Если статус игры не 'waiting the begining' возвращается `{"result":
"badGameState"}`.
Если пользователь уже участвует в начавшейся или ожидающей начала игре
возвращается `{"result": "alreadyInGame"}`
Если число игроково ожидающих начало игры уже равно максимальному
числу игроков на карте возвращается `{"result": "tooManyPlayers"}`

###leaveGame
#####Format:
    {
        'action' => 'leaveGame'
        'sid' => 1
    };
#####Success:
    {'result' => 'ok' };

#####Fail:
      {"result": "badJson"},
      {"result": "badSid"},
      {"result": "notInGame"}
#####Description:
Пользователь покидает игру.
Если пользоваель не участвует в указанной игре возвращается
      `{"result": "notInGame"}`

